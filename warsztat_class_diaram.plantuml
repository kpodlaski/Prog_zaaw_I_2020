@startuml
    Mechanic --|>Employee
    Employee --|>Person  
    PersonClient --|> Person
    PersonClient --|> Client
    CompanyClient --|> Client
    Client "1" o-- "0..*" Order :order
    'two direction assotiation
    Client "1" *-- "0..*" Car: car/owner

    Car o-- CarElement: element
    CarElement o-- Part : parts
    CarElement o-- CarElement: subelement
    Repair "1" --> "1" CarElement : element
    Repair "1" o-- Part : repaired_part
    Order -- CarElement : element_to_repair
    Order -- Car : car_to_repair
    Order o-- Repair : repair
    Invoice o-- Order: order
    System --> DataProvider : data_provider

    note top of System
        Patterns to use:
            Decorator ...
            Observer (Listener) 
                on order, for Mechanic
                on order, for System
                on invoce, for Client
            
    end note

    class Person{
        -_name:  string 
        -_sname: string
        -_phone: string
        -address:string

        +name():string
        +sname(): string
        +phone():string
        +address():string
    }

    class Employee{
        +survey_client(client:Client):Order
    }

    class Mechanic{
        -account : string
        +diagnose(order: Order): Repair[] 
        +do_repair(repair: Repair)
    }
    note right of Mechanic
        diagnose -- Visitor Pattern
        diagnose and do_repair -- Template Method
    end note
    class Client{
        -taxid : string
        +desc():string
        +phone():string
        +address():string

    }

    class PersonClient{

    }

    class CompanyClient{

    }

    class Car{}

    class CarElement <<Composite>>{

    }
    
    'Sate of part: broken, new, old 
    class Part{}
    class Order{}
    class Repair{
        - state
    }

    class Invoice{}

    class System {
        +left_car(car:Car): void
    }

    'interface have only pure virtual methods
    interface DataProvider  <<Proxy>>{

    }
    

    'hide members
@enduml